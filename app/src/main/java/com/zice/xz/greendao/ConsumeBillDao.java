package com.zice.xz.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.zice.xz.dataentity.ConsumeBill;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONSUME_BILL".
*/
public class ConsumeBillDao extends AbstractDao<ConsumeBill, Long> {

    public static final String TABLENAME = "CONSUME_BILL";

    /**
     * Properties of entity ConsumeBill.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Index = new Property(0, Long.class, "index", false, "INDEX");
        public final static Property ConsumeBillId = new Property(1, Long.class, "consumeBillId", true, "_id");
        public final static Property TypeId = new Property(2, Long.class, "typeId", false, "type_id");
        public final static Property TypeName = new Property(3, String.class, "typeName", false, "type_name");
        public final static Property Year = new Property(4, String.class, "year", false, "year");
        public final static Property Month = new Property(5, String.class, "month", false, "month");
        public final static Property Day = new Property(6, String.class, "day", false, "day");
        public final static Property Money = new Property(7, float.class, "money", false, "money");
        public final static Property InsertTime = new Property(8, String.class, "insertTime", false, "insert_time");
        public final static Property Desc = new Property(9, String.class, "desc", false, "desc");
    }

    private Query<ConsumeBill> consumeType_ConsumeBillsQuery;

    public ConsumeBillDao(DaoConfig config) {
        super(config);
    }
    
    public ConsumeBillDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONSUME_BILL\" (" + //
                "\"INDEX\" INTEGER," + // 0: index
                "\"_id\" INTEGER PRIMARY KEY ," + // 1: consumeBillId
                "\"type_id\" INTEGER," + // 2: typeId
                "\"type_name\" TEXT," + // 3: typeName
                "\"year\" TEXT," + // 4: year
                "\"month\" TEXT," + // 5: month
                "\"day\" TEXT," + // 6: day
                "\"money\" REAL NOT NULL ," + // 7: money
                "\"insert_time\" TEXT," + // 8: insertTime
                "\"desc\" TEXT);"); // 9: desc
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_CONSUME_BILL_INDEX ON \"CONSUME_BILL\"" +
                " (\"INDEX\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONSUME_BILL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ConsumeBill entity) {
        stmt.clearBindings();
 
        Long index = entity.getIndex();
        if (index != null) {
            stmt.bindLong(1, index);
        }
 
        Long consumeBillId = entity.getConsumeBillId();
        if (consumeBillId != null) {
            stmt.bindLong(2, consumeBillId);
        }
 
        Long typeId = entity.getTypeId();
        if (typeId != null) {
            stmt.bindLong(3, typeId);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(4, typeName);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(5, year);
        }
 
        String month = entity.getMonth();
        if (month != null) {
            stmt.bindString(6, month);
        }
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(7, day);
        }
        stmt.bindDouble(8, entity.getMoney());
 
        String insertTime = entity.getInsertTime();
        if (insertTime != null) {
            stmt.bindString(9, insertTime);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(10, desc);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ConsumeBill entity) {
        stmt.clearBindings();
 
        Long index = entity.getIndex();
        if (index != null) {
            stmt.bindLong(1, index);
        }
 
        Long consumeBillId = entity.getConsumeBillId();
        if (consumeBillId != null) {
            stmt.bindLong(2, consumeBillId);
        }
 
        Long typeId = entity.getTypeId();
        if (typeId != null) {
            stmt.bindLong(3, typeId);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(4, typeName);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(5, year);
        }
 
        String month = entity.getMonth();
        if (month != null) {
            stmt.bindString(6, month);
        }
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(7, day);
        }
        stmt.bindDouble(8, entity.getMoney());
 
        String insertTime = entity.getInsertTime();
        if (insertTime != null) {
            stmt.bindString(9, insertTime);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(10, desc);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }    

    @Override
    public ConsumeBill readEntity(Cursor cursor, int offset) {
        ConsumeBill entity = new ConsumeBill( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // index
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // consumeBillId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // typeId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // typeName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // year
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // month
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // day
            cursor.getFloat(offset + 7), // money
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // insertTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // desc
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ConsumeBill entity, int offset) {
        entity.setIndex(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setConsumeBillId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTypeId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setTypeName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setYear(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMonth(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDay(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMoney(cursor.getFloat(offset + 7));
        entity.setInsertTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDesc(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ConsumeBill entity, long rowId) {
        entity.setConsumeBillId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ConsumeBill entity) {
        if(entity != null) {
            return entity.getConsumeBillId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ConsumeBill entity) {
        return entity.getConsumeBillId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "consumeBills" to-many relationship of ConsumeType. */
    public List<ConsumeBill> _queryConsumeType_ConsumeBills(Long typeId) {
        synchronized (this) {
            if (consumeType_ConsumeBillsQuery == null) {
                QueryBuilder<ConsumeBill> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TypeId.eq(null));
                consumeType_ConsumeBillsQuery = queryBuilder.build();
            }
        }
        Query<ConsumeBill> query = consumeType_ConsumeBillsQuery.forCurrentThread();
        query.setParameter(0, typeId);
        return query.list();
    }

}
